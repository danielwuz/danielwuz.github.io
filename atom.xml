<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Daniel Wu's Blog]]></title>
  <link href="http://danielwuz.github.io/atom.xml" rel="self"/>
  <link href="http://danielwuz.github.io/"/>
  <updated>2014-12-12T10:05:51-05:00</updated>
  <id>http://danielwuz.github.io/</id>
  <author>
    <name><![CDATA[Daniel Wu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Bitwise Operations]]></title>
    <link href="http://danielwuz.github.io/blog/2014/08/12/bitwise-operations/"/>
    <updated>2014-08-12T07:01:23-04:00</updated>
    <id>http://danielwuz.github.io/blog/2014/08/12/bitwise-operations</id>
    <content type="html"><![CDATA[<p>I recently took an online course <a href="https://class.coursera.org/hwswinterface-002">Hardware/Software Interface</a> on Coursera, offered by University of Washington. It&rsquo;s a great course, and brought my memory to those good old days back in school many years ago. In the first lecture, the professor talked about how computer handles numbers through bitwise operation. Although nowadays, the majority of programmers are programming in high-level languages, I believe as a programmer, it&rsquo;s important for us to understand what these basics are and how to use them effectively.</p>

<p>If you haven&rsquo;t studied this topic thoroughly, or need to refresh your memory, take a look at the &ldquo;Resources&rdquo; section, as I&rsquo;ve listed couple resources there for you to reference. In this blog post, I&rsquo;ll be showing you some of the moset common bitwise operation.</p>

<h2>Application</h2>

<h3>Check if two variables have the same signs</h3>

<p>Two variables <code>x</code> and <code>y</code> are both positive or both negative if <code>(x &gt; 0) ^ (y &gt; 0) == 0</code></p>

<h3>Extract the 2nd most significant byte of an integer</h3>

<p>First shift, then mask: <code>(x &gt;&gt; 17) &amp; 0xFF</code></p>

<h3>Extract the sign of an integer:</h3>

<p>Use <code>&amp; 1</code> to clear out all other bits except LSB: <code>(x &gt;&gt; 31) &amp; 1</code></p>

<h3>Conditionals as Boolean expressions</h3>

<p>Assuming x is 0 or 1, an <code>if-else</code> statement</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">x</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">a</span> <span class="o">=</span> <span class="n">y</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">a</span> <span class="o">=</span> <span class="n">z</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>which is the same as <code>a = x ? y : z;</code></p>

<p>can be rewritten as: <code>a = ((x &lt;&lt; 31) &gt;&gt; 31) &amp; y + ((!x) &lt;&lt; 31</code> on a 32-bit machine.</p>

<h3>Determining if an integer is a power of 2</h3>

<p>We can determine if an integer is power of 2 by <code>(v &amp; (v - 1)) == 0;</code>, assuming 0 is not considered as power of 2.</p>

<h3>Compute exponentiation</h3>

<p>Supporse we&rsquo;d like to compute the exponentiation operation of $x^y$ in real numbers, the brute-force way is to multiply $x$ by itself $y$ times, as in below code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">power</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&#39;&#39;&#39; compute x**y &#39;&#39;&#39;</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">y</span><span class="p">):</span>
</span><span class='line'>        <span class="n">result</span> <span class="o">*=</span> <span class="n">x</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">result</span>
</span></code></pre></td></tr></table></div></figure>


<p>The complexity of this approach is in the order of the length of $y$, which is exponential in binary.</p>

<p>Observe that $x^y$ can be computed in below equation:</p>

<p>$$
\begin{equation}
  x^y =
  \begin{cases}
  (x^\frac{y}{2})^2 &amp; \text{if } y \text{ mod } 2 = 0, \cr
  (x^\frac{y}{2})^2 * x &amp; \text{if } y \text{ mod } 2 = 1.
  \end{cases}
\end{equation}
$$</p>

<p>We can use a recursive function to implement above logic:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">power</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&#39;&#39;&#39; compute x**y &#39;&#39;&#39;</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">y</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span> <span class="k">return</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">y</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span> <span class="k">return</span> <span class="n">x</span>
</span><span class='line'>    <span class="n">tmp</span> <span class="o">=</span> <span class="n">power</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="o">//</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">y</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">tmp</span> <span class="o">*</span> <span class="n">tmp</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">tmp</span> <span class="o">*</span> <span class="n">tmp</span> <span class="o">*</span> <span class="n">x</span>
</span></code></pre></td></tr></table></div></figure>


<p>Running time of this computation is logarithmic to the value of $y$, therefore linear to the length of $y$ in binary.</p>

<p>A third way is to utilize bit shifting operation. Think this way, suppose we can represent $y$ in binary $k_1k_2..k_i..k_n$, where $k_i$ has value either 0 or 1, we can compute $x^y$ like below:
$$
x^y = x^{k_1k_2..k_i} = \prod{x^{k_i}} \text{ where } ith \text{ bit } = 1
$$
For example, $2^{10}$ can be written as
$$
2^{10_{10}} = 2^{1010_2} = 2^{1000_2} * 2^{0010_2}
$$</p>

<p>Therefore, we can continuously shift $y$ to the right and check its $i$th bit until all bits are checked, as shown in below python code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">power</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&#39;&#39;&#39;computes x**y &#39;&#39;&#39;</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">while</span> <span class="n">y</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">y</span> <span class="o">&amp;</span> <span class="mi">1</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
</span><span class='line'>            <span class="n">result</span> <span class="o">*=</span> <span class="n">x</span>
</span><span class='line'>        <span class="n">x</span> <span class="o">=</span> <span class="n">x</span> <span class="o">*</span> <span class="n">x</span>
</span><span class='line'>        <span class="n">y</span> <span class="o">=</span> <span class="n">y</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">result</span>
</span></code></pre></td></tr></table></div></figure>


<p>Comparing the the second approach, bit shifting way is faster because bitwise operation is faster as it avoids the overhead of function calls and call stack management, as opposed to recursive function call.</p>

<p>If you still don&rsquo;t understand how this algorithm works, I encourage you take a piece of paper and a pen, and work out a concrete example.</p>

<h1>Resources</h1>

<p>There are more to say about bitwise operation. I&rsquo;ve listed here some good articles and videos below that talk about it in a decent depth.</p>

<ul>
<li><a href="https://www.youtube.com/playlist?list=PL726AB973C6E39758">Understanding Binary Numbers</a>: A series of videos on Youtube designed to improve your understanding of binary numbers, including how to add, subtract, multiply and divide binary numbers.</li>
<li><a href="http://www.cprogramming.com/tutorial/bitwise_operators.html">Bitwise Operators in C and C++: A Tutorial</a>:</li>
<li><a href="http://stackoverflow.com/questions/141525/absolute-beginners-guide-to-bit-shifting">Discussion on StackOverflow</a>: some suggestions for absolute beginners to bit shifting.</li>
<li><a href="https://graphics.stanford.edu/~seander/bithacks.html">Bit Twiddling Hacks</a>:</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fastest Way to Compute Fibonacci Numbers]]></title>
    <link href="http://danielwuz.github.io/blog/2014/07/29/fastest-way-to-compute-fibonnaci-numbers/"/>
    <updated>2014-07-29T21:26:00-04:00</updated>
    <id>http://danielwuz.github.io/blog/2014/07/29/fastest-way-to-compute-fibonnaci-numbers</id>
    <content type="html"><![CDATA[<p>In mathematics, the Fibonacci numbers are integers given by below equals:
$$
\begin{equation}
  F_n =
  \begin{cases}
  1 &amp; \text{if } n &lt;= 2, \cr
  F_{n-1} + F_{n-2} &amp; \text{if } n > 2.
  \end{cases}
\end{equation}
$$
This number sequence has many beautiful properties, and numerous algorithms and applications are inspired by or turned out to follow its properties, for example, <a href="https://en.wikipedia.org/wiki/Fibonacci_heap">Fibonacci Heap</a>. Topics on this sequence of numbers have been well developed over the years, nonetheless it&rsquo;s still one of the most popular questions you can expect in an interview.</p>

<p>It&rsquo;s not hard for a software developer to come up with an brute-force solution in 5 minutes, shown as below code snippet:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">fibonacci</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&#39;&#39;&#39;Computes nth fibonacci number.</span>
</span><span class='line'><span class="sd">    &#39;&#39;&#39;</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">n</span> <span class="o">&lt;=</span> <span class="mi">2</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">fibonacci</span><span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="n">fibonacci</span><span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">2</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is a work solution. The problem is that, however, the computation is too expensive because basically it recomputes lots of results in the two recursive call. In fact, the complexity is approximately $O(2^n)$. The issue has been well discussed on <a href="http://stackoverflow.com/questions/360748/computational-complexity-of-fibonacci-sequence">StackOverflow</a>.</p>

<p>Of course, we can gain a huge performance improvement by simply momerize previously computed results. Just as blow python code,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">memo</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">fibonacci</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&#39;&#39;&#39;Computes nth fibonacci number.</span>
</span><span class='line'><span class="sd">    &#39;&#39;&#39;</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">memo</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">memo</span><span class="p">[</span><span class="n">n</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">n</span> <span class="o">&lt;=</span> <span class="mi">2</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">memo</span><span class="p">[</span><span class="n">n</span><span class="p">]</span> <span class="o">=</span> <span class="n">fibonacci</span><span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="n">fibonacci</span><span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">memo</span><span class="p">[</span><span class="n">n</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Observe that we compute each Fibonacci number from 0 to $n$ only once. Therefore, the complexity of computing $n$th Fibonacci number reduces to $O(n)$ immediately!</p>

<p>But can we do better? I read from this <a href="http://vinayakgarg.wordpress.com/2012/11/07/fastest-way-to-compute-fibonacci-number/">post</a>, the author gave out a decent solution based on the fact that</p>

<p>\begin{equation}
  F_{2k} = F_k*(F_{k+1} &ndash; F_k)
\end{equation}
\begin{equation}
  F_{2k+1} = F_{k+1}^2 + F_k^2
\end{equation}</p>

<p>I just copied over the code for you to read, as below.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">fib</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">n</span> <span class="o">&lt;=</span> <span class="mi">2</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">1</span>
</span><span class='line'>    <span class="n">k</span> <span class="o">=</span> <span class="n">n</span> <span class="o">/</span> <span class="mi">2</span>
</span><span class='line'>    <span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="n">fib</span><span class="p">(</span><span class="n">k</span> <span class="o">+</span> <span class="mi">1</span><span class="p">),</span> <span class="n">fib</span><span class="p">(</span><span class="n">k</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">n</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">a</span> <span class="o">*</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span> <span class="o">*</span> <span class="n">b</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">b</span> <span class="o">*</span> <span class="p">(</span><span class="mi">2</span> <span class="o">*</span> <span class="n">a</span> <span class="o">-</span> <span class="n">b</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Very nice solution! This algorithm computes Fibonacci number efficiently in $O(log(n))$ time.</p>

<p>To complete this blog, I would really like to show you a smart way that I read from the book &ldquo;The Art of Computer Programming (volume 1)&rdquo;. I was totally amazed by its elegance when I first saw this solution. The idea is based on below equation:
$$
\begin{equation}
 F_n = \frac{1}{\sqrt{5}}(\phi^n &ndash; \hat{\phi}^n)
\end{equation}
$$
where
$$
\begin{equation}
\hat{\phi} = 1 &ndash; \phi = \frac{1}{2}(1 &ndash; \sqrt{5})
\end{equation}
$$
$\phi$ is the golden ratio, approximately equals value $1.6180339887$.</p>

<p>Notice here that $\hat{\phi}$ has magnitude less that 1, therefore, $\hat{\phi}$ gets very small as $n$ gets large. As long as $\hat{\phi}$ is small enough, we have
$$
\begin{equation}
 F_n = \frac{1}{\sqrt{5}}\phi^n
\end{equation}
$$
Given by below python code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">math</span> <span class="kn">import</span> <span class="n">sqrt</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">fibonacci</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
</span><span class='line'>    <span class="n">sqrt_of_5</span> <span class="o">=</span> <span class="n">sqrt</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'>    <span class="n">golden_ratio</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span> <span class="o">+</span> <span class="n">sqrt_of_5</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">round</span><span class="p">(</span><span class="n">golden_ratio</span> <span class="o">**</span> <span class="n">n</span> <span class="o">/</span> <span class="n">sqrt_of_5</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Although this function only computes approximate value, surprisely, it works well even when $n$ is small. Nevertheless, this solution is by no means better than previous one. Because of the exponentiation operation, it still runs $O(log(n))$ time on the machine code level.</p>

<p>If you&rsquo;re interested in computing Fibonacci numbers, I highly suggest you take a look at this <a href="http://www.chaos.org.uk/~eddy/craft/Fibonacci.html">article</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Firefox Customization for Programmers]]></title>
    <link href="http://danielwuz.github.io/blog/2014/07/26/firefox-customization-for-programmers/"/>
    <updated>2014-07-26T10:03:53-04:00</updated>
    <id>http://danielwuz.github.io/blog/2014/07/26/firefox-customization-for-programmers</id>
    <content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. Introduction</a></li>
<li><a href="#sec-2">2. Maximize content area</a></li>
<li><a href="#sec-3">3. Maximize speed!</a></li>
<li><a href="#sec-4">4. Navigate faster</a></li>
<li><a href="#sec-5">5. Duckduckgo</a></li>
<li><a href="#sec-6">6. What&#8217;s next</a></li>
<li><a href="#sec-7">7. External links</a></li>
</ul>
</div>
</div>


<h1>Introduction</h1>

<p>Firefox is famous for its highly customizability. You can almost tailor everything in Firefox to meet your taste. In this blog, I&rsquo;ll show you some customization that I did to increase my productivity as a  programmer. The browser version is 31.0 on MacOS as I&rsquo;m writing this blog, but it should be similar on other platforms.</p>

<h1>Maximize content area</h1>

<p>One of the thing that I would like to do is to remove tab margin. Tab margin is the blank space between a tab and your browser top boundary, as in below figure.</p>

<p><img src="http://danielwuz.github.io/images/20140726/tab_margin.png" width="250" title="tab margin" alt="img" /></p>

<p>Since most of the time I keep my firefox full screen, I don&rsquo;t like tab margin because it&rsquo;s wasting space and I don&rsquo;t see any value of it, especially when I&rsquo;m working on a small screen, every pixel counts! Let&rsquo;s get rid of it.</p>

<p>First off, let&rsquo;s find <code>userChrome.css</code>. <code>userChrome.css</code> is a CSS file in chrome folder that can be used to change the way that Firefox interface look. Basically, when you launch a Firefox application, it will load <code>userChrome.css</code> after loading its default settings; Therefore, you can customize almost every aspects of your browser UI by putting CSS in that file.</p>

<p>On Mac, you can find <code>userChrome.css</code> in directory <em>&ldquo;~/Library/Application Support/Firefox/Profiles/xxxxxxxx.default/chrome/&rdquo;</em>. Here, <code>xxxxxxxx</code> is a string of random characters. If you have trouble finding that location or you&rsquo;re on a different platform, see <a href="http://kb.mozillazine.org/Profile_folder_-_Firefox">Firefox Profile Folder</a> for more detailed instruction.</p>

<p>Under the profile folder, open <code>userChrome.css</code> with your favarite text editor. If that file doesn&rsquo;t exist, simply create one in plain text. Then add below code.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="k">@namespace</span> <span class="nt">url</span><span class="o">(</span><span class="nt">http</span><span class="o">://</span><span class="nt">www</span><span class="nc">.mozilla.org</span><span class="o">/</span><span class="nt">keymaster</span><span class="o">/</span><span class="nt">gatekeeper</span><span class="o">/</span><span class="nt">there</span><span class="nc">.is.only.xul</span><span class="o">)</span><span class="p">;</span>
</span><span class='line'><span class="c">/* The above line should appear only once */</span>
</span><span class='line'>
</span><span class='line'><span class="nf">#TabsToolbar</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">margin-top</span><span class="o">:</span> <span class="m">-10px</span> <span class="cp">!important</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And that&rsquo;s it! Relaunch your Firefox, you should see top margin is gone.</p>

<p>Another customization that you may do is to narrow the navigation bar margin a little bit. In my opinion, the default margin is too wide that makes the address bar look so small. Appending below code in your <code>userChrome.css</code> to make it thinner.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nf">#nav-bar-customization-target</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">padding-top</span><span class="o">:</span> <span class="m">0px</span> <span class="cp">!important</span><span class="p">;</span>
</span><span class='line'>  <span class="k">padding-bottom</span><span class="o">:</span> <span class="m">0px</span> <span class="cp">!important</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>See how Firefox looks in below screenshot<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>. You can download the final <code>userChrome.css</code> file <a href="http://danielwuz.github.io/assets/20140726/userChrome.css">here</a>.</p>

<p><img src="http://danielwuz.github.io/images/20140726/fullscreen.png" title="no margin" alt="img" /></p>

<h1>Maximize speed!</h1>

<p>If you&rsquo;re like me, who spend a significant time browsing web pages and looking for documentations everyday, you would like your browser to load a page as fast as possible. Here, I&rsquo;ll show you an easy way to make Firefox loading a page much much faster than other browsers. The idea is to by customizing HTTP Pipelining in Firefox. HTTP Pipelining is a technique in which multiple requests will be send out without waiting for the corresponding responses. It helps to speed up the browsing capability.</p>

<p>In address bar, type <code>about:config</code> and then click button &ldquo;I&rsquo;ll be careful, I promise!&rdquo;. In the search box, type <code>pipe</code> and hit enter. You should see some configuration similar to below screenshot.</p>

<p><img src="http://danielwuz.github.io/images/20140726/about_config.png" title="about:config" alt="img" /></p>

<p>Update below preferences:</p>

<table class="table table-striped">
<thead>
<tr>
<th ><b>Preferences</b></th>
<th ><b>Value</b></th>
</tr>
</thead>

<tbody>
<tr>
<td >network.http.pipelining</td>
<td >true</td>
</tr>


<tr>
<td >network.http.pipelining.maxrequests</td>
<td >8</td>
</tr>


<tr>
<td >network.http.pipelining.ssl</td>
<td >true</td>
</tr>


<tr>
<td >network.http.proxy.pipelining</td>
<td >true</td>
</tr>
</tbody>
</table>


<p>That&rsquo;s it. Restart your Firefox, and enjoy the speed.</p>

<h1>Navigate faster</h1>

<p>As a programmer, Just imagine how amazing and effecient it would be to accomplish all your work only by keyboard.</p>

<p>Fortunately, there is a add-on called <em>VimFx</em> you can add to your Firefox. VimFx introduces Vim-style keyboard shortcuts for browsing and navigation, which can significantly reduce the time you spend moving your hand off the keyboard just to find the mouse. You can find this add-on and install instruction <a href="https://addons.mozilla.org/en-US/firefox/addon/vimfx/">here</a>. If you&rsquo;re a programmer and interested in this project, you may find their project page on <a href="https://github.com/akhodakivskiy/VimFx">GitHub</a>.</p>

<p>After installing VimFx to your Firefox, you may hit <code>?</code> on any page to see its keyboard cheatsheet. Here I&rsquo;ll show your some most useful shortcuts to get your on board. Since it&rsquo;s similar to vim, you can hit <code>j</code> to scroll page down, <code>k</code> to scroll page up, <code>h</code> to scroll left and <code>l</code> to scroll right; you can hit <code>o</code> to quickly focus on Address Bar, <code>O</code> to quickly focus on Search Bar; you can hit <code>d</code> to scroll half a page down, <code>u</code> to scroll half a page up, <code>gg</code>(means hit <code>g</code> twice) to go to the top of current page, <code>G</code> to go to the bottom; you can hit <code>J</code> to move to previous tab, <code>K</code> move to next one; you can hit <code>x</code> to close current tab, hit <code>X</code> to re-open last closed tab, which is my favoriate feature of this add-on.</p>

<p>One of the killer feature of VimFx is <code>f</code> &ndash; following a link on current page. It&rsquo;s so amazing that it I think it deserves a separate paragraph. <code>f</code> allows you quickly jump to any clickable element in a page by hitting a single key, similar to vim-easymotion or ace-jump in Emacs. Let&rsquo;s take a look in action. Go to <code>www.google.com</code>, and hit <code>f</code>. You&rsquo;ll see all clickable elements on the page will have a letter by its side.</p>

<p><img src="http://danielwuz.github.io/images/20140726/vimfx.png" title="vimfx F key" alt="img" /></p>

<p>If you then hit any of those, Firefox will automatically click corresponding element, no matter an text box or a click. For example, hitting <code>s</code> in previous screenshot will focus on the search box.</p>

<p>If you are a vim user, you should find yourself at home; if you are not a vim user, play with it, and see how it can accelerate the way you browsing web pages.</p>

<h1>Duckduckgo</h1>

<p>Last by not least, I suggest setting your default search engine in Firefox to <em>Duckduckgo</em>. <a href="https://www.duckduckgo.com">Duckduckgo</a> is a search engine that emphasizes user privacy and avoid personalized user results. That means all users will see the same search results for a given search term. But what fascinates me is the power of search with bang <code>!</code>.</p>

<p>Bang <code>!</code> is a powerful tool for searching, and is unique in Duckduckgo. Typically, when a user wants to search something, she opens a new tab and go to her favorite search engine, <code>www.google.com</code> for instance, and types search terms, then hits <code>Enter</code>. Nothing wrong with this workflow, but we can do better. As a programmer, I often need to search on different sites, I may search a project on GitHub, or search a video on Youtube, or search a online course on Coursera. Duckduckgo can really help out in this situation by unifying the way you search.</p>

<p>Let&rsquo;s try it out. Firstly, let&rsquo;s set Duckduckgo as our default search engine. Go to <code>https://duckduckgo.com</code>, then click link &ldquo;Use in Firefox&rdquo; at the very bottom. Click &ldquo;OK&rdquo; in the pop up to accept, and we&rsquo;re good to go.</p>

<p>Now we can search any term directly in our search box or address bar<sup id='fnref:2'><a href='#fn:2' rel='footnote'>2</a></sup>. Let&rsquo;s say I&rsquo;d like to search emacs on GitHub. Type <code>emacs !gh</code> (&ldquo;gh&rdquo; stands for &ldquo;Git Hub&rdquo;) in search box, then hit enter. Bang! A Github search result page will show in the browser with the keyword &ldquo;emacs&rdquo;. How amazing! We don&rsquo;t even have to go to <code>https://github.com/</code> first. Similarly, if I want to search emacs on Youtube, I can simply type <code>emacs !yt</code> in my search box. Additionally, sometimes you might still want to search on Google or Bing, you can easily do so by appending <code>!g</code> or <code>!b</code> to your search terms, respectively. What&rsquo;s more, if you just include bang <code>!</code> with your search terms, Duckduckgo will redirect you to the first search result. This is handy for navigational search, e.g. try <code>facebook !</code>.</p>

<p>There are many such shortcuts with bang, I&rsquo;ll list some below that I use most frequently.</p>

<table class="table table-striped">
<thead>
<tr>
<th ><b>Site</b></th>
<th ><b>Shortcut</b></th>
</tr>
</thead>

<tbody>
<tr>
<td >Google</td>
<td >!g</td>
</tr>


<tr>
<td >Bing</td>
<td >!b</td>
</tr>


<tr>
<td >GitHub</td>
<td >!gh</td>
</tr>


<tr>
<td >Youtube</td>
<td >!yt</td>
</tr>


<tr>
<td >Wikipedia</td>
<td >!w</td>
</tr>


<tr>
<td >Youdao Dictionary</td>
<td >!ydd</td>
</tr>
</tbody>
</table>


<h1>What&rsquo;s next</h1>

<p>There are many more tricks and add-ons a developer can use the increase productivity, for example, <code>Tile Tabs</code> allows you to align tabs side by side, and <code>FindBar Tweak</code> offers a really great in-browser text search experience. I may cover more add-ons like those in another blog.</p>

<p>Besides, you may wonder how do I know which attributes to put into <code>userChrome.css</code>. It turns out Firefox GUI is very similar to an HTML application and you can inspect its element and/or debug its GUI, with an add-on called <code>DOM Inspector</code>. I may cover this topic in future blog as well.</p>

<h1>Footnotes</h1>

<div class="footnotes">
    <ol>
        <li id='fn:1'><p> Screenshot was taken in fullscreen, with theme Fearthox designed by IAL.
  <a href='#fnref:1' rev='footnote'>↩</a></p>
</li><li id='fn:2'><p> I personally removed search box from toolbar, because I can use address bar for both searching and navigating. If I want to perform searching, I simply type search terms plus <code>!g</code> in address bar, as you see in this blog, thanks to the power of duckduckgo.
<a href='#fnref:2' rev='footnote'>↩</a></p>
</li>
    </ol>
</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My First Blog]]></title>
    <link href="http://danielwuz.github.io/blog/2014/07/23/my-first-blog/"/>
    <updated>2014-07-23T09:52:05-04:00</updated>
    <id>http://danielwuz.github.io/blog/2014/07/23/my-first-blog</id>
    <content type="html"><![CDATA[<p>This is an experimental post. You might want to simply skip it because it provides nothing useful. I leave it here to allow myself try out different settings and plugins in octopress.</p>

<p>Paragraph. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean libero purus, ultrices ullamcorper tristique vel, lacinia id elit. Mauris cursus lobortis mi condimentum fermentum. Morbi non eros non nulla tempor gravida. Vestibulum egestas molestie neque at aliquet. Etiam porta purus metus, ut interdum dolor sodales et. Suspendisse augue felis, auctor sit amet placerat non, hendrerit eu magna. Cras suscipit turpis nec risus volutpat aliquam. Aenean ac tellus justo.</p>

<p>Try out code snippet plugin and style. Nunc ac metus diam. <code>inline code</code> Nulla ornare massa in egestas malesuada.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Fixnum</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">prime?</span>
</span><span class='line'>    <span class="p">(</span><span class="s1">&#39;1&#39;</span> <span class="o">*</span> <span class="nb">self</span><span class="p">)</span> <span class="o">!~</span> <span class="sr">/^1?$|^(11+?)\1+$/</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>A paragraph after code snippets.  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean libero purus, ultrices ullamcorper tristique vel, lacinia id elit. Mauris cursus lobortis mi condimentum fermentum. Morbi non eros non nulla tempor gravida. Vestibulum egestas molestie neque at aliquet. Etiam porta purus metus, ut interdum dolor sodales et. Suspendisse augue felis, auctor sit amet placerat non, hendrerit eu magna. Cras suscipit turpis nec risus volutpat aliquam. Aenean ac tellus justo.</p>

<p>Test math equations</p>

<p>$$
\begin{align}
\mbox{Union: } &amp; A\cup B = {x\mid x\in A \mbox{ or } x\in B}
\mbox{Concatenation: } &amp; A\circ B  = {xy\mid x\in A \mbox{ and } y\in B}
\mbox{Star: } &amp; A^\star  = {x_1x_2\ldots x_k \mid  k\geq 0 \mbox{ and each } x_i\in A}
\end{align}
$$</p>
]]></content>
  </entry>
  
</feed>
